mydata = read.csv("./Task2_FIT/train.csv")  # read csv file
getwd()
mydata = read.csv("/Users/vicky/train.csv")  # read csv file
mydata = read.csv("/Users/vicky/Downloads/FIT5145_A3/train.csv")  # read csv file
mydata = read.csv("/Users/vicky/Downloads/FIT5145_A3_files/train.csv")  # read csv file
#Drawing curve over the histogram presented
hist(mydata$X1, freq=FALSE, main="X1 Variable", xlab="Value of X1", border="green", col="blue", ylab = "Frequency")
curve(dnorm(x, mean=mean(mydata$X1), sd=sd(mydata$X1)), add=TRUE, col="red")
x=seq(min(mydata$X2),max(mydata$X2),0.05)
hist(mydata$X2, freq=FALSE, main="X2 Variable", xlab="Value of X2", border="green", col="blue", ylab = "Frequency")
x=seq(min(mydata$X2),max(mydata$X2),0.05)
curve(dnorm(x, mean=mean(mydata$X2), sd=sd(mydata$X2)), add=TRUE, col="red")
linm1 = lm(Y~X1+X2+X3+X4, data=mydata)
sm1 = summary(linm1)
summary(linm1)
linm2 = lm(Y~X2+X3+X4, data=mydata)
sm2 = summary(linm2)
summary(linm2)
plinm1 = predict(linm1, test_df)
test_df = read.csv("/Users/vicky/Downloads/FIT5145_A3_files/test.csv")
plinm1 = predict(linm1, test_df)
plinm2 = predict(linm2, test_df)
predict(linm1, test_df)
predict(linm2, test_df)
#Drawing curve over the histogram presented
hist(mydata$X1, freq=FALSE, main="X1 Variable", xlab="Value of X1", border="green", col="blue", ylab = "Frequency")
data = read.csv("/Users/vicky/Downloads/FIT5145_A3_files/train.csv")  # read csv file
#Drawing curve over the histogram presented
x=seq(min(data$X1),max(data$X1),0.05)
hist(data$X1, freq=FALSE, main="X1 Variable", xlab="Value of X1", border="green", col="blue", ylab = "Frequency")
curve(dnorm(x, mean=mean(mydata$X1), sd=sd(mydata$X1)), add=TRUE, col="red")
hist(data$X1, freq=FALSE, main="X1 Variable", xlab="Values of co effieicent X1", border="blue", col="blue", ylab = "Frequency")
hist(data$X1, freq=FALSE, main="X1 Variable", xlab="Values of co effieicent X1", border="black", col="blue", ylab = "Frequency")
hist(data$X3, freq=FALSE, main="X3 Variable", xlab="Values of co effieicent X3", border="black", col="yellow", ylab = "Frequency")
hist(data$X4, freq=FALSE, main="X4 Variable", xlab="Values of co effieicent X4", border="black", col="red", ylab = "Frequency")
curve(dnorm(x, mean=mean(mydata$X4), sd=sd(mydata$X4)), add=TRUE, col="red")
#Drawing curve over the histogram presented
x=seq(min(data$X1),max(data$X1),0.05)
hist(data$X1, freq=FALSE, main="X1 Variable", xlab="Values of co effieicent X1", border="black", col="blue", ylab = "Frequency")
curve(dnorm(x, mean=mean(mydata$X1), sd=sd(mydata$X1)), add=TRUE, col="red")
hist(data$X2, freq=FALSE, main="X2 Variable", xlab="Values of co effieicent X2", border="black", col="green", ylab = "Frequency")
x=seq(min(data$X2),max(data$X2),0.05)
curve(dnorm(x, mean=mean(mydata$X2), sd=sd(mydata$X2)), add=TRUE, col="red")
hist(data$X3, freq=FALSE, main="X3 Variable", xlab="Values of co effieicent X3", border="black", col="yellow", ylab = "Frequency")
x=seq(min(data$X3),max(data$X3),0.05)
curve(dnorm(x, mean=mean(mydata$X3), sd=sd(mydata$X3)), add=TRUE, col="red")
hist(data$X4, freq=FALSE, main="X4 Variable", xlab="Values of co effieicent X4", border="black", col="red", ylab = "Frequency")
x=seq(min(data$X4),max(data$X4),0.05)
curve(dnorm(x, mean=mean(mydata$X4), sd=sd(mydata$X4)), add=TRUE, col="red")
#Drawing curve over the histogram presented
x=seq(min(data_train$X1),max(data_train$X1),0.05)
data_train = read.csv("/Users/vicky/Downloads/FIT5145_A3_files/train.csv")  # read csv file
#Drawing curve over the histogram presented
x=seq(min(data_train$X1),max(data_train$X1),0.05)
hist(data_train$X1, freq=FALSE, main="X1 Variable", xlab="Values of co effieicent X1", border="black", col="blue", ylab = "Frequency")
curve(dnorm(x, mean=mean(mydata$X1), sd=sd(mydata$X1)), add=TRUE, col="red")
hist(data_train$X2, freq=FALSE, main="X2 Variable", xlab="Values of co effieicent X2", border="black", col="green", ylab = "Frequency")
x=seq(min(data_train$X2),max(data_train$X2),0.05)
curve(dnorm(x, mean=mean(data_train$X2), sd=sd(data_train$X2)), add=TRUE, col="red")
hist(data_train$X3, freq=FALSE, main="X3 Variable", xlab="Values of co effieicent X3", border="black", col="yellow", ylab = "Frequency")
x=seq(min(data_train$X3),max(data_train$X3),0.05)
curve(dnorm(x, mean=mean(data_train$X3), sd=sd(data_train$X3)), add=TRUE, col="red")
hist(data_train$X4, freq=FALSE, main="X4 Variable", xlab="Values of co effieicent X4", border="black", col="red", ylab = "Frequency")
x=seq(min(data_train$X4),max(data_train$X4),0.05)
curve(dnorm(x, mean=mean(data_train$X4), sd=sd(data_train$X4)), add=TRUE, col="red")
lin_model1 = lm(Y~X1+X2+X3+X4, data=data_train)
summary(lin_model1)
lin_model2 = lm(Y~X2+X3+X4, data=data_train)
summary(lin_model2)
mse <- function(YActual, YPredicted)
mean((YActual - YPredicted)^2)
# Calculate mse value for Model 1
mse(test_dataframe$Y, Ypredicted1)
test_dataframe = read.csv("/Users/vicky/Downloads/FIT5145_A3_files/test.csv")
predicted1=predict(linm1, test_df)
predicted2=predict(linm2, test_df)
mse <- function(YActual, YPredicted)
mean((YActual - YPredicted)^2)
# Calculate mse value for Model 1
mse(test_dataframe$Y, Ypredicted1)
# Calculate mse value for Model 1
mse(test_dataframe$Y, predicted1)
# Calculate mse value for Model 2
mse(test_dataframe$Y, predicted2)
meansqrerror <- function(YActual, YPredicted)
mean((YActual - YPredicted)^2)
# Calculate mse value for Model 1
meansqrerror(test_dataframe$Y, predicted1)
# Calculate mse value for Model 2
meansqrerror(test_dataframe$Y, predicted2)
datq = read.csv(" auto mpg train.csv", header = TRUE)
datq = read.csv("auto mpg train.csv", header = TRUE)
install.packages("fpp2")
library(fpp2)
library(ggplot2)
library(forecast)
library(fma)
library(expsmooth)
library(fpp2)
head(melsyd)
autoplot(melsyd)
red <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv', header = TRUE, sep = ';')
white <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv', header = TRUE, sep = ';')
dim(red)
dim(white)
str(red)
str(white)
names(red)
names(white)
red[, 'type'] <- 'Red'
white[, 'type'] <- 'White'
wine <- rbind(red,white)
wine$type <- as.factor(wine$type)
head(wine)
tail(wine)
names(wine)[c(4,6,7,11)]<-c("RS","free.SO2", "total.SO2","ABV")
head(wine)
Summary(wine)
summary(wine)
View(sm2)
str(wine)
summary(wine)
library(psych)
install.packages("psych")
library(psych)
describe(wine)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
boxplot(wine)
install.packages("car")
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("zip")
boxplot(wine)
library(shiny)
runExample('Hello')
runExample('01_hello')
runExample('02_text')
setwd("~/Desktop/BF3a")
library(fpp2)
library(readxl)
library(tidyverse)
retail_data_group <- read_xlsx('RetailDataGroups.xlsx', skip = 3) %>%
pull('4') %>%
ts(start = c(1982,4), frequency = 12)
retail_data_group
autoplot(retail_data_group)
retail_data_group %>% mstl() %>% autoplot()
retail_data_group %>% mstl(s.window = 20) %>% autoplot()
retail_data_group %>% mstl() <- fit
retail_data_group %>% mstl() -> fit
autoplot(fit)
retail_data_group %>% stlf(method = 'naive') -> forecast
forecast
retail_data_group %>% stlf(lambda = 0,method = 'naive') -> forecast
forecast
autoplot(forecast)
retail_data_group %>% stlf(method = 'naive') -> forecast
autoplot(forecast)
retail_data_group %>% stlf(lambda = 0,method = 'naive') -> forecast
autoplot(forecast)
retail_data_group %>% stlf(method = 'naive') -> forecast
autoplot(forecast)
View(forecast)
forecast
retail_data_group %>% mstl() -> fit_stl
autoplot(fit_stl)
retail_data_group %>% stlf(method = 'naive') -> forecast_stl
autoplot(forecast_stl)
fit1 <- ets(retail_data_group)
fit1
fit2 <- ets(retail_data_group, model = 'MAM')
fit2
fit2 <- ets(retail_data_group, model = 'MAM', damped = FALSE)
fit2
autoplot(fit1)
checkresiduals(fit1)
fit1 %>% forecast() %>% autoplot()
View(forecast)
forecast
forecast(fit1)
library(fpp2)
library(readxl)
library(tidyverse)
library(fpp2)
library(readxl)
library(tidyverse)
retail_data_group <- read_xlsx('RetailDataGroups.xlsx', skip = 3) %>%
pull('4') %>%
ts(start = c(1982,4), frequency = 12)
autoplot(retail_data_group)
retail_data_group %>% mstl() -> fit_stl
autoplot(fit_stl)
retail_data_group %>% stlf(method = 'naive') -> forecast_stl
autoplot(forecast_stl)
fit1 <- ets(retail_data_group)
fit1
autoplot(fit1)
checkresiduals(fit1)
fit1 <- ets(retail_data_group)
fit1
autoplot(fit1)
checkresiduals(fit1)
fit1 %>% forecast() %>% autoplot()
forecast(fit1)
autoplot(fit_stl)
retail_data_group %>% mstl(lambda = 0) -> fit_stl
autoplot(fit_stl)
retail_data_group %>% stlf(lambda = 0,method = 'naive') -> forecast_stl
autoplot(forecast_stl)
autoplot(retail_data_group)
forecast_stl
fit1 <- ets(retail_data_group)
fit1
fit1 <- ets(retail_data_group)
fit1
autoplot(fit1)
checkresiduals(fit1)
fit1 %>% forecast() %>% autoplot()
forecast(fit1)
forecast_stl
fit1 %>% forecast() %>% autoplot() %>% legend()
fit1 %>% forecast() %>% autoplot() %>% legend(x,y)
fit1 %>% forecast() %>% autoplot()
forecast_stl$fitted
forecast_stl$method
forecast_stl$model
forecast_stl$residuals
forecast_stl$mean
forecast_stl$series
accuracy(forecast_stl)
accuracy(forecast(fit1))
forecast_stl$residuals %>% autoplot()
forecast_stl$level %>% autoplot()
forecast_stl$residuals %>% acf()
forecast_stl$residuals %>% acf(lag.max = 20)
acf(forecast_stl$residuals,lag.max = 20)
fit1 %>% forecast() %>% autoplot() %>% autolayer(forecast_stl)
fit1 %>% forecast() %>% autoplot() + autolayer(forecast_stl)
fit1 %>% forecast() %>% autoplot() -> plot
plot + autolayer(forecast_stl)
plot + autolayer(forecast_stl$mean)
plot + autolayer(forecast_stl$mean)
fit1 %>% forecast() %>% autoplot(pi = FALSE) -> plot
plot + autolayer(forecast_stl$mean)
fit1 %>% forecast() %>% autoplot(pi = FALSE) -> plot
plot + autolayer(forecast_stl$mean)
plot
plot + autolayer(forecast_stl$mean)
fit1 %>% forecast() %>% autoplot(PI = FALSE) -> plot
plot + autolayer(forecast_stl$mean)
plot + autolayer(forecast_stl)
plot + autolayer(forecast_stl, PI = F)
fit1 %>% forecast() %>% autoplot(PI = FALSE, ts.colour = 'red') -> plot
plot + autolayer(forecast_stl, PI = F)
plot + autolayer(forecast_stl, PI = F, ts.colour = 'green')
autoplot(forecast_stl)
retail_data_group %>% stlf(lambda = 0,method = 'naive') -> forecast_stl
autoplot(forecast_stl)
fit1 <- ets(retail_data_group)
fit1
autoplot(fit1)
checkresiduals(fit1)
fit1 %>% forecast() %>% autoplot(PI = FALSE, ts.colour = 'red') -> plot
plot
fit1 %>% forecast() %>% autoplot(ts.colour = 'red',PI = FALSE) -> plot
plot
fit1 %>% forecast() %>% autoplot(predict.colour = 'red',PI = FALSE) -> plot
plot
fit1 %>% forecast(predict.colour = 'red' %>% autoplot(predict.colour = 'red',PI = FALSE) -> plot
accuracy(forecast(fit1))
plot
fit1 %>% forecast(predict.colour = 'red' %>% autoplot(predict.colour = 'red',PI = FALSE) -> plot
plot
fit1 %>% forecast(predict.colour = 'red') %>% autoplot(predict.colour = 'red',PI = FALSE) -> plot
plot
library(fpp2)
library(readxl)
library(tidyverse)
retail_data_group <- read_xlsx('RetailDataGroups.xlsx', skip = 3) %>%
pull('4') %>%
ts(start = c(1982,4), frequency = 12)
autoplot(retail_data_group)
library(fpp2)
library(readxl)
library(tidyverse)
retail_data_group <- read_xlsx('RetailDataGroups.xlsx', skip = 3) %>%
pull('4') %>%
ts(start = c(1982,4), frequency = 12)
autoplot(retail_data_group)
retail_data_group %>% mstl(lambda = 0) -> fit_stl
autoplot(fit_stl)
retail_data_group %>% stlf(lambda = 0,method = 'naive') -> forecast_stl
acf(forecast_stl$residuals,lag.max = 20)
autoplot(forecast_stl)
fit1 <- ets(retail_data_group)
fit1
autoplot(fit1)
checkresiduals(fit1)
fit1 %>% forecast() %>% autoplot(predict.colour = 'red',PI = FALSE) -> plot
plot
fit1 %>% forecast() %>% autoplot(predict.colour = 'red',PI = FALSE) -> plot
fit1 %>% forecast() %>% autoplot(predict.colour = 'red',PI = FALSE) -> plot
plot
fit1$fitted
fit1 %>% forecast(h=12) %>% autoplot(predict.colour = 'red',PI = FALSE) -> plot
plot
setwd("~/Desktop/Sem3/Buss_For/BF_Full")
library(readxl)
library(fpp2)
library(tidyverse)
# plotting the allocated time series data
retail_data <- read_xlsx("RetailDataIndividual.xlsx", skip=3) %>%
pull("29360714") %>%
ts(start = c(1982,4), frequency = 12)
autoplot(retail_data) + xlab('Year') + ylab('Turnover in Millions') + ggtitle('Food Retail Turnover in South Australia')
## Assignment 2 ##
# plotting the seasonal plot and subsereis plot for the time series data
ggseasonplot(retail_data) + xlab('Year') + ylab('Turnover in Millions') + ggtitle('Seasonal plot Food Retail Turnover in South Australia')
ggsubseriesplot(retail_data) + xlab('Year') + ylab('Turnover in Millions') + ggtitle('SubSeries plot of Food Retail Turnover in South Australia')
# Tranforming the data and plotting
#Box Cox tranformation
# Getting the lambda value from bocxox function for tranforming my data
lambda <- BoxCox.lambda(retail_data)
retail_data %>% BoxCox(lambda) %>%
autoplot() +
ylab(paste("BoxCox(turnover,", round(lambda, 2), ")")) + ggtitle('Boxcox Transformation')
# Log Transformation
autoplot(BoxCox(retail_data,lambda = 0))  + xlab("Year") + ylab("Turnover in millions") + ggtitle("Natural Log Transformation")
# Inverse tranformation
autoplot(BoxCox(retail_data,lambda = -1))  + xlab("Year") + ylab("Turnover in millions") + ggtitle("Inverse Transformation")
# splitting time series data as training and test data
retail_1 <- window(retail_data, end = c(2014,11))
retail_2 <- window(retail_data, start = c(2015,1))
# plotting the train data and test data
autoplot(retail_data) + autolayer(retail_1, series = 'Training') + autolayer(retail_2, series = 'Testing')
# different forecasting methods on training data
rwf_forecast <- rwf(retail_1, h = 24)
mean_forecast <- meanf(retail_1 , h = 24)
naive_forecast <- naive(retail_1 , h = 24 )
snaive_forecast <- snaive(retail_1, h =24 )
# Checking the parameter and accuracies of forecating methods
accuracy(mean_forecast,retail_2)
accuracy(snaive_forecast,retail_2)
# Plotting the point forecast from different forecasting methods
autoplot(retail_1) +
autolayer(snaive_forecast,series = "snaive", PI = FALSE) +
autolayer(mean_forecast, series = "mean" , PI = FALSE)
# Checking the residuals
checkresiduals(snaive_forecast)
autoplot(snaive(retail_data, h =24))
## Assignment 3 ##
# Fitting the chosen ETS model for the time series data
ets_fit <- ets(retail_data, model = 'MAM', damped = F)
autoplot(ets_fit) # plotting the fit
ets_fit # Checking the estimates and smoothing parameters
checkresiduals(ets_fit) # checking the residual
# Fittng an ETS model for the time series data
ets_fit1 <- ets(retail_data)
autoplot(ets_fit1) # plotting the fit
ets_fit1
checkresiduals(ets_fit1) # checking the residual
# Forecating with the ETS model
ets_fit1 %>% forecast() %>% autoplot()
# Comparing the forecast for the time sereis data
ets_fit1 %>% forecast() %>% autoplot(include = 12*8) +
autolayer(forecast(ets_fit)$mean)
## Assignment 4 ##
# Plotting the data with lod tranformed and with seasonally differenced
cbind('South Australia - Food Retail' = retail_data,
'Log Transformed' = log(retail_data),
'Seasonal Differenced' = diff(log(retail_data),lag =12)) %>%
autoplot(facets = T) + xlab('Year') + ylab('') +
ggtitle('Monthly Food Retail - South Australia')
# Log transformed and checking the ACFand PACF plots
transf_data <- BoxCox(retail_data, lambda = 0)
transf_data %>% autoplot()
ggtsdisplay(transf_data)
# Seasonal differencing the log transformed data
transf_data %>% diff(lag=12) -> diff_data
nsdiffs(diff_data)
ndiffs(diff_data)
# plotting the ACF and PACF plots
diff_data %>% ggtsdisplay()
# Fitting the chosen ARIMA model fir Ts data
ARIMA_fit1 <- Arima(retail_data, order = c(3,0,0), seasonal = c(3,1,3), lambda = 0)
ARIMA_fit1 %>% checkresiduals()
# Observing the ACF and PACF plots
ARIMA_fit1 %>% residuals() %>% ggtsdisplay()
# Alternate ARIMA models for the Ts data
ARIMA_fit2 <- Arima(retail_data, order = c(3,0,0), seasonal = c(3,1,0), lambda = 0)
ARIMA_fit3 <- Arima(retail_data, order = c(3,0,0), seasonal = c(2,1,3), lambda = 0)
ARIMA_fit4 <- Arima(retail_data, order = c(3,0,0), seasonal = c(1,1,3), lambda = 0)
# Checking the model parameters
ARIMA_fit2
ARIMA_fit3
ARIMA_fit4
# Model using auto.arima function
ARIMA_Auto_fit1 <-  auto.arima(retail_data, lambda = 0)
ARIMA_Auto_fit1 %>% checkresiduals()
# Using auto.arima function with stepwise and approximation setting False
ARIMA_Auto_fit2 <- auto.arima(retail_data, stepwise = F, approximation = F, lambda = 0)
ARIMA_Auto_fit2 %>% checkresiduals()
# Checking the accuracies of the models
accuracy(ARIMA_fit1)
accuracy(ARIMA_Auto_fit1)
accuracy(ARIMA_Auto_fit2)
# forecasting with suitable chosen model after comparisons
ARIMA_fit1 %>% forecast() %>% autoplot()
# Plotting the RetailDataIndividualFull.xlsx includes data for the period 2017-2018
retail_data_full <- read_xlsx("RetailDataIndividualFull.xlsx", skip=3) %>%
pull("29360714") %>%
ts(start = c(1982,4), frequency = 12)
autoplot(retail_data_full) + xlab('Year') + ylab('Turnover in Millions') +
ggtitle('Food Retail Turnover in South Australia') +
autolayer(forecast(ARIMA_fit1), series = 'Forecast from ARIMA', PI = F)
# Comapring all the forecast of all models used for the ts series
autoplot(forecast(ARIMA_fit1),xlab = 'Year', ylab = 'Retail Turnover in milliions', PI = F, alpha = 0.6) +
autolayer(forecast(ets_fit1), series = 'ETS', PI = F, alpha = 0.5) +
autolayer(snaive(retail_data), series = 'SNAIVE', PI = F, alpha = 0.3) + ggtitle('Forecast Comparison')
# comaparing the accuracies of the models
accuracy(ARIMA_fit1)
accuracy(forecast(ets_fit1))
accuracy(snaive(retail_data))
# fitting the suitable chosen model for the RetailDataIndividualFull data
fit_fulldata <- Arima(retail_data_full, order = c(3,0,0), seasonal = c(3,1,3), lambda = 0)
fit_fulldata %>% forecast(level = 80) %>% autoplot() + xlab('Year') + ylab('Turnover in Millions')
forecast(fit_fulldata)
forecast(fit_fulldata, PI = FALSE)
forecast(fit_fulldata, CI = FALSE)
forecast(fit_fulldata)
